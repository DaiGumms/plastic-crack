version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: plastic-crack-postgres
    environment:
      POSTGRES_DB: plastic_crack
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - plastic-crack-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: plastic-crack-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - plastic-crack-network

  # Backend API (for production)
  api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: plastic-crack-api
    environment:
      NODE_ENV: production
      PORT: 8000
      DATABASE_URL: postgresql://postgres:password@postgres:5432/plastic_crack
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - plastic-crack-network
    profiles:
      - production

  # Frontend Web App (for production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: plastic-crack-frontend
    environment:
      VITE_API_URL: http://localhost:8000/api/v1
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - plastic-crack-network
    profiles:
      - production

  # Nginx Load Balancer (for production)
  nginx:
    image: nginx:alpine
    container_name: plastic-crack-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    networks:
      - plastic-crack-network
    profiles:
      - production

  # MinIO for local S3-compatible storage (development)
  minio:
    image: minio/minio:latest
    container_name: plastic-crack-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - plastic-crack-network
    profiles:
      - development

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  plastic-crack-network:
    driver: bridge
